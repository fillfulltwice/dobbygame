import { t, getCurrentLanguage } from '../data/translations.js';
import { DOM, Animation } from '../utils/helpers.js';
import { FireworksAPI } from '../utils/api.js';
import { getRecipeHint } from '../data/recipes.js';

export class Dobby {
    constructor(game) {
        this.game = game;
        this.container = null;
        this.chatInput = null;
        this.chatResponse = null;
        this.avatar = null;
        this.api = new FireworksAPI();
        this.isThinking = false;
    }
    
    async init() {
        this.container = DOM.get('dobby');
        if (!this.container) return;
        
        this.render();
        this.showGreeting();
    }
    
    render() {
        if (!this.container) return; // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        DOM.clear(this.container);    
        
        // –ê–≤–∞—Ç–∞—Ä Dobby
        this.avatar = DOM.create('div', 'dobby-avatar');
        this.avatar.innerHTML = '<img src="assets/dobby-wizard.png" alt="Dobby" class="dobby-avatar-img"/>';
        this.container.appendChild(this.avatar);
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        const mood = DOM.create('div', 'dobby-mood');
        mood.innerHTML = this.getMoodIcon();
        this.container.appendChild(mood);
        
        // –ü–æ–ª–æ—Å—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–≤–µ—Ä–∏—è (kept minimal)
        this.renderBars();
        
        // –ß–∞—Ç
        this.renderChat();
        
        // –ö–Ω–æ–ø–∫–∏ –ª–∞–∫–æ–º—Å—Ç–≤
        this.renderTreatButtons();
        
        // –£–ø—Ä–æ—â–µ–Ω–∏–µ: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        this.renderCurrentRequest();
    }
    
    setupEventListeners() {

    }

    renderBars() {
        const barsContainer = DOM.create('div', 'dobby-bars');
        
        // –õ–æ—è–ª—å–Ω–æ—Å—Ç—å
        const loyaltyBar = DOM.create('div', 'loyalty-bar');
        loyaltyBar.innerHTML = `
            <div class="bar-label">${t('dobby.loyalty')}: ${this.game.state.loyalty}%</div>
            <div class="bar-bg">
                <div class="bar-fill" style="width: ${this.game.state.loyalty}%"></div>
            </div>
        `;
        
        // –î–æ–≤–µ—Ä–∏–µ
        const trustBar = DOM.create('div', 'trust-bar');
        trustBar.innerHTML = `
            <div class="bar-label">${t('dobby.trust')}: ${this.game.state.trust}%</div>
            <div class="bar-bg">
                <div class="bar-fill" style="width: ${this.game.state.trust}%"></div>
            </div>
        `;
        
        barsContainer.appendChild(loyaltyBar);
        barsContainer.appendChild(trustBar);
        this.container.appendChild(barsContainer);
    }
    
    renderChat() {
        const chatContainer = DOM.create('div', 'chat-container');

        // API key banner if missing
        if (!this.api.hasApiKey()) {
            const apiBanner = DOM.create('div', 'api-key-banner');
            apiBanner.innerHTML = `
                <div class="api-key-title">üîë ${t('messages.api_key_required') || '–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á Fireworks'}</div>
                <div class="api-key-row">
                    <input type="password" id="apiKeyInput" class="api-key-input" placeholder="Fireworks API Key">
                    <button class="btn btn-primary api-key-save">${t('common.save') || '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                </div>
                <div class="api-key-hint">${t('messages.api_key_hint') || '–ö–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, —è –±—É–¥—É –¥–∞–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.'}</div>
            `;
            const saveBtn = apiBanner.querySelector('.api-key-save');
            const keyInput = apiBanner.querySelector('#apiKeyInput');
            if (saveBtn && keyInput) {
                DOM.on(saveBtn, 'click', () => {
                    const key = keyInput.value.trim();
                    if (key) {
                        this.api.setApiKey(key);
                        apiBanner.remove();
                        this.showMessage(t('messages.api_key_saved') || 'API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
                    }
                });
                DOM.on(keyInput, 'keypress', (e) => {
                    if (e.key === 'Enter') saveBtn.click();
                });
            }
            chatContainer.appendChild(apiBanner);
        }
        
        // –ü–æ–ª–µ –≤–≤–æ–¥–∞
        this.chatInput = DOM.create('input', 'chat-input');
        this.chatInput.type = 'text';
        this.chatInput.placeholder = t('dobby.chat_placeholder');
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const chatButton = DOM.create('button', 'btn btn-primary chat-button');
        chatButton.innerHTML = t('dobby.chat_button');
        DOM.on(chatButton, 'click', () => this.sendMessage());
        
        // –û–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        this.chatResponse = DOM.create('div', 'chat-response');
        this.chatResponse.innerHTML = t('dobby.greetings.first_time');
        
        chatContainer.appendChild(this.chatInput);
        chatContainer.appendChild(chatButton);
        chatContainer.appendChild(this.chatResponse);
        this.container.appendChild(chatContainer);
        
        // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        DOM.on(this.chatInput, 'keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
    }
    
    renderTreatButtons() {
        const treatContainer = DOM.create('div', 'treat-buttons flex gap-sm mt-md');
        
        const meatButton = DOM.create('button', 'btn btn-success');
        meatButton.innerHTML = `${t('dobby.give_meat')} (${this.game.state.meat})`;
        meatButton.disabled = this.game.state.meat <= 0;
        DOM.on(meatButton, 'click', () => this.game.giveTreat('meat'));
        
        const boneButton = DOM.create('button', 'btn btn-success');
        boneButton.innerHTML = `${t('dobby.give_bone')} (${this.game.state.bones})`;
        boneButton.disabled = this.game.state.bones <= 0;
        DOM.on(boneButton, 'click', () => this.game.giveTreat('bone'));
        
        treatContainer.appendChild(meatButton);
        treatContainer.appendChild(boneButton);
        this.container.appendChild(treatContainer);
    }
    
    renderCurrentRequest() {
        if (!this.game.state.currentRequest) return;
        
        const requestContainer = DOM.create('div', 'dobby-request mt-md');
        const request = this.game.state.currentRequest;
        
        requestContainer.innerHTML = `
            <div class="request-text">${request.text[getCurrentLanguage()]}</div>
            <button class="btn btn-primary dobby-request-button">${t('dobby.complete_request')}</button>
        `;
        
        const button = requestContainer.querySelector('.dobby-request-button');
        DOM.on(button, 'click', () => this.completeRequest());
        
        this.container.appendChild(requestContainer);
    }
    
    async sendMessage() {
        if (this.isThinking || !this.chatInput.value.trim()) return;
        
        const message = this.chatInput.value.trim();
        this.chatInput.value = '';
        
        const haveApi = this.api.hasApiKey();
        
        this.isThinking = true;
        this.chatResponse.innerHTML = t('dobby.thinking');
        this.avatar.classList.add('thinking');
        
        try {
            const context = {
                playerName: this.game.state.playerName,
                loyalty: this.game.state.loyalty,
                trust: this.game.state.trust,
                conversationCount: this.game.state.conversationCount,
                mood: this.game.state.dobbyMood,
                currentLanguage: getCurrentLanguage(),
                allRecipes: this.getAllRecipesString()
            };

            let responseText = '';
            if (haveApi) {
                responseText = await this.api.askDobby(message, context);
            } else {
                responseText = this.generateLocalResponse(message, context);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.game.state.conversationCount++;
            this.game.state.trust = Math.min(100, this.game.state.trust + 2);

            this.showMessage(responseText);
            this.updateMood();
        } catch (error) {
            console.error('Dobby API error:', error);
            this.showMessage(t('messages.api_error'));
        }
        
        this.isThinking = false;
        this.avatar.classList.remove('thinking');
        this.game.updateUI();
    }

    generateLocalResponse(message, context) {
        const lang = context.currentLanguage;
        const lower = message.toLowerCase();
        // Try to hint a recipe if user mentions an element name
        const maybeElement = lower.match(/[a-z_]+|[–∞-—è—ë_]+/i)?.[0];
        if (maybeElement) {
            const hint = getRecipeHint(maybeElement, context.trust);
            if (hint) {
                return lang === 'ru'
                    ? `–ì–∞–≤-–≥–∞–≤! –ë–µ–∑ –∫–ª—é—á–∞ API —è —à—ë–ø–Ω—É –∑–∞–≥–∞–¥–∫—É: ${hint.ru}`
                    : `Woof! No API key, but here's a riddle: ${hint.en}`;
            }
        }
        return lang === 'ru'
            ? '–ì–∞–≤! –î–∞–π –º–Ω–µ üçñ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö. (–°–æ–≤–µ—Ç: –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ API –∫–ª—é—á –ø–æ–∑–∂–µ, —è –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥—É –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å!)'
            : 'Woof! Give me a üçñ or ask about recipes. (Tip: you can add an API key later, I will still hint!)';
    }
    
    showMessage(message) {
        this.chatResponse.innerHTML = message;
        Animation.fadeIn(this.chatResponse, 300);
    }
    
    showGreeting() {
        if (this.game.state.playerName) {
            if (this.game.state.conversationCount === 0) {
                this.showMessage(t('dobby.greetings.new_player', { name: this.game.state.playerName }));
            } else {
                this.showMessage(t('dobby.greetings.returning', { name: this.game.state.playerName }));
            }
        } else {
            this.showMessage(t('dobby.greetings.first_time'));
        }
    }
    
    updateMood() {
        const combined = (this.game.state.loyalty + this.game.state.trust) / 2;
        
        if (combined >= 80) {
            this.game.state.dobbyMood = 'loving';
        } else if (combined >= 60) {
            this.game.state.dobbyMood = 'happy';
        } else if (combined <= 20) {
            this.game.state.dobbyMood = 'angry';
        } else {
            this.game.state.dobbyMood = 'neutral';
        }
        
        // üõ°Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!this.container) return;
        
        const mood = this.container.querySelector('.dobby-mood');
        if (mood) {
            mood.innerHTML = this.getMoodIcon();
            mood.className = `dobby-mood ${this.game.state.dobbyMood}`;
        }
        
        if (this.avatar) {
            this.avatar.className = `dobby-avatar ${this.game.state.dobbyMood}`;
        }
    }
    
    getMoodIcon() {
        switch (this.game.state.dobbyMood) {
            case 'happy': return 'üòä';
            case 'loving': return 'ü•∞';
            case 'angry': return 'üò†';
            default: return 'üòê';
        }
    }
    
    completeRequest() {
        const request = this.game.state.currentRequest;
        if (!request) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        let canComplete = true;
        Object.entries(request.need).forEach(([elementId, count]) => {
            if (!this.game.state.hasElement(elementId, count)) {
                canComplete = false;
            }
        });
        
        if (!canComplete) {
            this.game.components.ui.showFloatingText('–£ —Ç–µ–±—è –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤!', true);
            return;
        }
        
        // –ó–∞–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        Object.entries(request.need).forEach(([elementId, count]) => {
            this.game.state.removeElement(elementId, count);
        });
        
        // –î–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É
        this.game.state.trust += 15;
        this.game.state.loyalty += 10;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showHint(request.reward);
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å
        this.game.state.currentRequest = null;
        this.game.state.completedRequests.push(request.reward);
        
        this.game.updateUI();
    }
    
    showHint(hintType) {
        const hints = {
            steam_hint: '–û–≥–æ–Ω—å + –í–æ–¥–∞ = –ü–∞—Ä! –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–∞—Ä!',
            ice_hint: '–í–æ–¥–∞ + –•–æ–ª–æ–¥ = –õ—ë–¥! –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –í–æ–¥—É + –í–æ–∑–¥—É—Ö!',
            gold_hint: '–°–æ–ª–Ω—Ü–µ + –ö–∞–º–µ–Ω—å = –ó–æ–ª–æ—Ç–æ! –°–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∫–∞–º–Ω–∏ –≤ –∑–æ–ª–æ—Ç–æ!',
            dragon_hint: '–û–≥–æ–Ω—å + –Ø–π—Ü–æ = –î—Ä–∞–∫–æ–Ω! –û–≥–Ω–µ–Ω–Ω–æ–µ —è–π—Ü–æ —Ä–æ–∂–¥–∞–µ—Ç –¥—Ä–∞–∫–æ–Ω–∞!'
        };
        
        const hint = hints[hintType] || 'Dobby –∑–∞–±—ã–ª, —á—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å...';
        this.showMessage(`üéÅ –°–µ–∫—Ä–µ—Ç –æ—Ç Dobby: ${hint}`);
    }
    
    getAllRecipesString() {
        return `
        fire + water = steam
        water + air = ice
        earth + water = mud
        fire + earth = lava
        air + water = cloud
        fire + air = lightning
        `;
    }
}
